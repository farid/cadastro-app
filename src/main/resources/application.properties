# database init, supports mysql too
database=mysql
#database=postgres
spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql

#spring.jpa.hibernate.show-sql=true

#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.url=jdbc:postgresql://149.56.238.185:5432/geraldb
#spring.datasource.username=postgres
#spring.datasource.password=1q2w3e4r5t6
#spring.datasource.initialization-mode=always


spring.datasource.url=jdbc:mysql://mysql.atendimento.svc.cluster.local:3306/cadastrodb
spring.datasource.username=root
spring.datasource.password=debezium
# SQL is written to be idempotent so this is safe
spring.datasource.initialization-mode=always



# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=none

# Internationalization
spring.messages.basename=messages/messages

# Actuator / Management
management.endpoints.web.base-path=/manage
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
#spring.resources.cache.cachecontrol.max-age=12h

### adicionar rhsso
#spring.security.oauth2.client.registration.keycloak.client-id=cadastro-app-client
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.keycloak.scope=openid
#
#spring.security.oauth2.client.provider.keycloak.issuer-uri=https://sso-devsecops-dev.apps.cluster-xvzsd.xvzsd.sandbox1900.opentlc.com/auth/realms/cadastro
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
#
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://sso-devsecops-dev.apps.cluster-xvzsd.xvzsd.sandbox1900.opentlc.com/auth/realms/cadastro